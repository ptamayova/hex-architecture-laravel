services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ai-chess-app
    restart: unless-stopped
    working_dir: /app
    ports:
      - "80:80"
      - "443:443"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=ai_chess
      - DB_USERNAME=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis
      - CACHE_STORE=redis
      - SESSION_DRIVER=redis
      - OCTANE_SERVER=frankenphp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-chess

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ai-chess-worker
    restart: unless-stopped
    working_dir: /app
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=ai_chess
      - DB_USERNAME=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis
      - CACHE_STORE=redis
      - SESSION_DRIVER=redis
    command: php artisan queue:work --tries=3 --timeout=90 --sleep=3 --max-jobs=1000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-chess

  postgres:
    image: postgres:17-alpine
    container_name: ai-chess-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ai_chess
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-chess

  redis:
    image: redis:7-alpine
    container_name: ai-chess-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-chess

networks:
  ai-chess:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
